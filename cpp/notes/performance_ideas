IDEAS TO DRASTICALLY IMPROVE PERFORMANCE

IDEA 1 - Carried state

  MoveFinder:
  Board -> Moves

  Can we write it more performantly using
  X -> Board -> Moves

  where X is info from the previous decision?

  General idea:
  * If a square has changed, it can only affect a certain area of the next board
  * rewrite as a bottom up implementation to do this...
  * complications when board is cleared

  Seems difficult


IDEA 2 - GPU acceleration

  Can we use the GPU to parallelise processing?


HOW TO PROGRESS

  1. FINISH EXISTING EVALUATIONS
    [x] 18_MoveEvaluator50
    [x] 18_MoveEvaluatorLinear50_fixed
    [x] 19_MoveEvaluatorLinear50_fixed

  1.1. Fix TetrisReady evaluation to include "accessible" at the current level (using utility)
    [x] Temporary fix with DEFAULT_LEVEL in common.hpp
    [x] Proper fix by changing IEvaluator interface (for passing the level). May not be best design, but can work. Needed because the level can change
      [x] Change NewGetNextMove to take in a level
      [x]] Change evaluateMine to take in const EvaluateData&

  1.2. Get rid of old usages of evaluate()
    [ ] replace existing tests with MoveEvaluatorGroup

  2. INCORPORATE LOOK-AHEAD IN SUMMARY DATA
    + get_transition_evaluation can use MoveFinderFSM with lookahead AS WELL
    + probably should rewrite runPieceSet
    + 





MoveFinder optimisation:
- No optimsation: ~38s
- small change: 27s
- several changes: 13s (34% of the original)

