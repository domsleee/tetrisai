
#pragma once
#include "src/common/Weighting.hpp"
#include "src/common/common.hpp"
#include "src/pso/ClientApi.hpp"
#include "src/shared/MoveFinder/MoveFinderFSM.h"
#include "src/shared/MoveEvaluator/MoveEvaluatorTetrisReady.hpp"
#include "src/shared/MoveEvaluator/MoveEvaluatorBlockLinear.hpp"


const int LINE_TRANSITION = 90;
const int LINE_ON_LEVEL_19 = 130;
const int LINE_ON_LEVEL_29 = 230;

std::string best18_block_linear = "[0.02123556525103787 15.60525656154044 9.64453036687273 2.9971127084379 -3.0575456303691624 6.203652808922442 17.10787210161017 -6.485066658410348 9.300480158818537 12.088983420248868 7.220090890698575 -5.573383857730125 -15.359555429566447 -11.903316177390618 -8.695067631220372 1.247064896847184 2.5548624769274317 -4.649744666192319 0 0]";
std::string best19_block_linear = "[0.8210414475725702 7.266677117608959 2.5732289699045294 12.819111681680328 7.830620774192513 8.646454203203165 14.733276589163028 -0.9553528893192365 -1.2381015174254113 5.588671958911702 8.615271062211534 4.601439780335625 -7.626144240163421 -6.2288499706956735 -26.470578031091282 2.6222787629970115 3.6604856692518153 -8.81742038388314 -0.10829727417039159 -7.289977209068]";

std::string best18_tetris_ready = "[0.02123556525103787 15.60525656154044 9.64453036687273 2.9971127084379 -3.0575456303691624 6.203652808922442 17.10787210161017 -6.485066658410348 9.300480158818537 12.088983420248868 7.220090890698575 -5.573383857730125 -15.359555429566447 -11.903316177390618 -8.695067631220372 1.247064896847184 2.5548624769274317 -4.649744666192319]";
std::string best19_tetris_ready = "[-0.9820549675952704 5.3081189330841525 6.158874350532281 11.074080203818365 -12.19551387100334 19.57394885664514 3.614142411867528 -3.116966144798633 13.514592634631494 -9.650393052609974 10.097667570340597 1.5577265621608836 -0.6230658448651245 -4.496176296594026 -24.505556483400312 2.4022494988128456 1.7356601005387047 -0.7185571773477497]";

std::string best18 = "[-0.9981266671825644 6.314235664122202 9.218841471366666 0.27802110735477736 -4.1780630417598195 7.433743023240332 8.34877823356098 1.8788685887367613 -0.8499180634596748 -1.8078460542586594 7.642165019678991 -4.116700896835317 4.954418944561089 -12.37120499004913 -11.044493568377911 1.8097163771233449 -1.0832040443509103]";
std::string best19 = "[-14.89103037780527 6.1859328293901985 3.1475886283096397 4.549423856563027 6.4739513866334395 7.16934616046338 19.220915906005704 -1.5353264906442918 8.606784031245795 4.760696336241033 13.769672756691616 -2.0002884453295877 -2.4896370025512127 -8.345237667961287 -13.478496677643442 1.0396980163363931 2.178578911705224]";

auto w1 = WeightingFn::readFromString(best18_block_linear);
auto w2 = WeightingFn::readFromString(best19_block_linear);

auto getMeMfPair(int num_lines) {
  auto me1 = MoveEvaluatorBlockLinear(w1);
  auto me2 = MoveEvaluatorBlockLinear(w2);

  //auto me1 = MoveEvaluatorTetrisReady(w1);
  //auto me2 = MoveEvaluatorTetrisReady(w2);
  //auto me1 = MoveEvaluatorAdapter(MoveEvaluator(), w1);
  //auto me2 = MoveEvaluatorAdapter(MoveEvaluator(), w2);
  
  auto mf1 = MoveFinderFSM();
  auto mf2 = MoveFinderFSM();
  auto mf3 = MoveFinderFSM();
  mf2.setMaxDropRem(2);
  mf3.setMaxDropRem(1);

  /*if (num_lines >= LINE_ON_LEVEL_29) {
    return std::pair(me2, mf3);
  }*/
  if (num_lines >= LINE_ON_LEVEL_19) {
    return std::pair(me2, mf2);
  }
  else if (num_lines >= LINE_TRANSITION) {
    return std::pair(me2, mf1);
  }
  return std::pair(me1, mf1);
}

MoveEvaluatorBlockLinear getBestMoveEvaluatorBlockLinear(bool is19) {
  return MoveEvaluatorBlockLinear(WeightingFn::readFromString(is19 ? best19_block_linear : best18_block_linear));
}
