
#pragma once
#include "src/common/Weighting.hpp"
#include "src/common/common.hpp"
#include "src/pso/ClientApi.hpp"
#include "src/shared/MoveEvaluator/MoveEvaluatorGroups.hpp"
#include "src/shared/MoveFinder/MoveFinderFSM.h"
#include "src/shared/MoveEvaluator/MoveEvaluatorTetrisReady.hpp"
#include "src/shared/MoveEvaluator/MoveEvaluatorBlockLinear.hpp"
#include "src/shared/MoveEvaluator/MoveEvaluatorBlockQuadratic.hpp"

#include <chrono>


const int LINE_TRANSITION = 90;
const int LINE_ON_LEVEL_19 = 130;
const int LINE_ON_LEVEL_29 = 230;

const std::string best18_block_linear = "[0.02123556525103787 15.60525656154044 9.64453036687273 2.9971127084379 -3.0575456303691624 6.203652808922442 17.10787210161017 -6.485066658410348 9.300480158818537 12.088983420248868 7.220090890698575 -5.573383857730125 -15.359555429566447 -11.903316177390618 -8.695067631220372 1.247064896847184 2.5548624769274317 -4.649744666192319 0 0]";
const std::string best19_block_linear = "[0.8210414475725702 7.266677117608959 2.5732289699045294 12.819111681680328 7.830620774192513 8.646454203203165 14.733276589163028 -0.9553528893192365 -1.2381015174254113 5.588671958911702 8.615271062211534 4.601439780335625 -7.626144240163421 -6.2288499706956735 -26.470578031091282 2.6222787629970115 3.6604856692518153 -8.81742038388314 -0.10829727417039159 -7.289977209068]";

const std::string best18_block_quadratic = "[0.02123556525103787 15.60525656154044 9.64453036687273 2.9971127084379 -3.0575456303691624 6.203652808922442 17.10787210161017 -6.485066658410348 9.300480158818537 12.088983420248868 7.220090890698575 -5.573383857730125 -15.359555429566447 -11.903316177390618 -8.695067631220372 1.247064896847184 2.5548624769274317 -4.649744666192319 0 0 0]";
const std::string best19_block_quadratic = "[-4.31412952345165 10.327663974422345 0.1747174364660009 14.118927937497855 10.509014352064455 2.471143287314036 8.4358465080887 -3.3862370733751144 4.616732811893811 6.560801805642936 6.989658083943469 7.641419137732136 -9.747729181420631 -4.365222809295216 -19.05313255314185 0.8291139406206796 1.8942604001284957 -0.745558230721703 -1.8448914793540758 2.1185741847555177 6.50710281709459]";

const std::string best18_tetris_ready = "[0.02123556525103787 15.60525656154044 9.64453036687273 2.9971127084379 -3.0575456303691624 6.203652808922442 17.10787210161017 -6.485066658410348 9.300480158818537 12.088983420248868 7.220090890698575 -5.573383857730125 -15.359555429566447 -11.903316177390618 -8.695067631220372 1.247064896847184 2.5548624769274317 -4.649744666192319]";
const std::string best19_tetris_ready = "[-0.9820549675952704 5.3081189330841525 6.158874350532281 11.074080203818365 -12.19551387100334 19.57394885664514 3.614142411867528 -3.116966144798633 13.514592634631494 -9.650393052609974 10.097667570340597 1.5577265621608836 -0.6230658448651245 -4.496176296594026 -24.505556483400312 2.4022494988128456 1.7356601005387047 -0.7185571773477497]";

const std::string best18 = "[-0.9981266671825644 6.314235664122202 9.218841471366666 0.27802110735477736 -4.1780630417598195 7.433743023240332 8.34877823356098 1.8788685887367613 -0.8499180634596748 -1.8078460542586594 7.642165019678991 -4.116700896835317 4.954418944561089 -12.37120499004913 -11.044493568377911 1.8097163771233449 -1.0832040443509103]";
const std::string best19 = "[-14.89103037780527 6.1859328293901985 3.1475886283096397 4.549423856563027 6.4739513866334395 7.16934616046338 19.220915906005704 -1.5353264906442918 8.606784031245795 4.760696336241033 13.769672756691616 -2.0002884453295877 -2.4896370025512127 -8.345237667961287 -13.478496677643442 1.0396980163363931 2.178578911705224]";

const std::string best19_block_linear_no_tetris_ready = "[3.6095413059152217 11.359665618381442 5.831580789554438 -1.021222630466214 -5.581185967790956 7.499684807165247 13.337698816716998 -2.5547276904980496 3.8956606526516353 2.243788720561176 12.430076235548995 -3.4928083195958806 -8.264134503998005 -8.903751325668008 -12.659461111382036 1.4109514282714957 2.053102143797935 -2.671126331902431 12.761930567582697]";
const std::string best19_block_linear_no_tetris_ready_fast = "[-6.51561918367595 4.837043356405306 -2.9207674819878875 3.9852404161851496 -3.037450170760434 9.343047545860005 -0.8498928508843404 -6.1114122357675775 9.421940034467632 0.5570700522983731 3.0601914528459346 -4.486751446306066 -0.6574093379829442 -10.476380113438793 -14.095655530054039 3.3439159302990116 1.0023471119927407 -0.9865789447303448 -2.5907389064252953]";

const auto w1 = WeightingFn::readFromString(best18_block_linear);
const auto w2 = WeightingFn::readFromString(best19_block_linear);


MoveEvaluatorGroup getBestMoveEvaluatorLinear_50_fixed(bool is19);


std::pair<MoveEvaluatorGroup, MoveFinderFSM> getMeMfPair(int num_lines) {
  auto me1 = getBestMoveEvaluatorLinear_50_fixed(false);
  auto me2 = getBestMoveEvaluatorLinear_50_fixed(true);

  //auto me1 = MoveEvaluatorTetrisReady(w1);
  //auto me2 = MoveEvaluatorTetrisReady(w2);
  //auto me1 = MoveEvaluatorAdapter(MoveEvaluator(), w1);
  //auto me2 = MoveEvaluatorAdapter(MoveEvaluator(), w2);
  
  auto mf1 = MoveFinderFSM();
  auto mf2 = MoveFinderFSM();
  auto mf3 = MoveFinderFSM();
  mf2.setMaxDropRem(2);
  mf3.setMaxDropRem(1);

  /*if (num_lines >= LINE_ON_LEVEL_29) {
    return std::pair(me2, mf3);
  }*/
  if (num_lines >= LINE_ON_LEVEL_19) {
    return std::pair(me2, mf2);
  }
  else if (num_lines >= LINE_TRANSITION) {
    return std::pair(me2, mf1);
  }
  return std::pair(me1, mf1);
}

MoveEvaluatorAdapter<MoveEvaluator> getBestMoveEvaluator(bool is19) {
  return {WeightingFn::readFromString(is19 ? best19 : best18)};
}

MoveEvaluatorAdapter<MoveEvaluator> getBestMoveEvaulator_pre(bool is19) {
  const std::string best18_pre = "[20.166656589746427 14.220441680899071 3.665482078162414 16.887450261453463 17.663564226527015 14.611433088612399 27.4741106208661 -4.301043476849422 4.058027613961025 14.784901050441466 9.713052126217072 -9.928252216678256 3.309295819541866 -18.205870875416814 -12.560690818282715 2.061356834811534 5.925891250494889]";
  return {WeightingFn::readFromString(best18_pre)};  
}

MoveEvaluatorAdapter<MoveEvaluator> getBestMoveEvaluator_new(bool is19) {
  const std::string best18_new = "[17.91557397284577 19.234060208604703 3.9477626983810397 16.950604914743824 21.04451563244532 12.036651508385495 29.93111956103606 1.3208565838200261 0.36075055605568807 18.33799128302757 7.750898400682315 -6.179328973910755 1.4738268600787334 -21.669895329799747 -15.148867990387304 1.680914608745685 8.492456119161027]";
  return {WeightingFn::readFromString(best18_new)};  
}

MoveEvaluatorAdapter<MoveEvaluator> getBestMoveEvaluator_new150(bool is19) {
  const std::string best18_new = "[6.225367152220381 13.35302754977615 6.754560910740577 7.853481288048731 -2.5839900618128073 9.412957924444445 24.069522097707697 -6.274471402706898 5.872464760450191 14.829636307525053 11.771131300483619 4.83948192222902 -11.619893183386413 -2.5210086247929127 -21.815185540375893 1.278566430210831 2.2445828800802046]";
  return {WeightingFn::readFromString(best18_new)};  
}

MoveEvaluatorAdapter<MoveEvaluator> getBestMoveEvaluator_new150_2(bool is19) {
  const std::string best18_newer = "[9.10554324662879 16.33272672337681 7.659334929794515 -0.17738063798801162 1.4431754323967005 9.14967481691832 25.71910405058426 -3.048831867883436 4.166935801800855 13.398191682495897 10.841440453217457 1.7076583213067085 -13.414900126903408 -4.735266508284329 -15.332255747813349 0.9403243652360014 3.2323102893588045]";
  return {WeightingFn::readFromString(best18_newer)};  
}

MoveEvaluatorGroup getBestMoveEvaluator50_pre(bool is19) {
  const std::string best18_50 = "[10.609686112351946 14.11586094649425 5.869929297041267 5.7085612643884165 16.587973564773193 8.056094348128898 13.252440488821513 -3.228528567660408 11.119785137232405 11.964257556805087 6.332576936574517 0.07169108916441014 -16.087622069974685 -4.205152528762122 -12.907722375749508 1.2749441908096484 3.0088897254901426]";
  auto group = getMoveEvaluatorGroups().at(MOVE_EVALUATOR_GROUP_NORMAL);
  group.setWeights(WeightingFn::readFromString(best18_50));
  return group;
}

MoveEvaluatorGroup getBestMoveEvaluatorNew50(bool is19) {
  const std::string best18_50 = "[4.270736557215795 17.4876742661911 1.0124365677024993 10.545484922626969 15.975235961730736 5.645634312556749 23.4619885148801 -1.9636420140525264 12.326985403626992 24.626551041601818 12.436242857252045 -1.1834870873507204 -17.465682477513713 -10.020459353501025 -14.506189115960499 1.1013587679851335 3.850902912933613]";
  auto group = getMoveEvaluatorGroups().at(MOVE_EVALUATOR_GROUP_NORMAL);
  group.setWeights(WeightingFn::readFromString(best18_50));
  return group;
}

MoveEvaluatorGroup getBestMoveEvaluatorLinear_50_pre(bool is19) {
  const std::string best18_50 = "[-14.783522673093575 12.484042471279608 2.2073769618900396 18.42953006248597 19.86779833267367 5.784969099962861 15.506793479369492 -2.3132776985777874 -7.779104226218222 16.92431405636064 8.204808394538661 1.72953928857963 -13.904354505340876 4.407106525507256 -13.018888131619775 0.5907956703740204 0.13573654529796986 16.289593499099418 -1.0862972371890847 -1.3523576961169077]";
  auto group = getMoveEvaluatorGroups().at(MOVE_EVALUATOR_GROUP_LINEAR);
  group.setWeights(WeightingFn::readFromString(best18_50));
  return group;
}

MoveEvaluatorGroup getBestMoveEvaluatorLinear_50_fixed(bool is19) {
  const std::string best18_50 = "[9.012721607559758 24.831640612330535 2.8785019222512402 20.71645093032459 -5.990259104721105 8.760096359380986 20.319772084037705 0.9634554214809312 13.44999656367468 23.0675175571021 10.696643393613279 1.7700204421758916 -19.969802219638947 -12.986711698408799 -21.191910628707696 1.7196662221779748 5.618677097249391 -1.033137253834985 -1.6881808827495592 13.604590202685163]";
  //const std::string best19_50 = "[-3.027444831076945 16.831794071083003 10.655878431478477 -4.171568858869294 11.147852294990525 12.578127059769304 4.9041939104197265 1.6234266511073496 14.148444462871586 0.5819982990758139 17.922740377203183 -5.45420372384668 -10.160130903325404 -11.988579028512016 -13.489535495310037 1.839892585343157 -2.542984715158172 -2.1900993854205404 1.6009459517609277 -5.590542300189999]";
  const std::string best19_50 = "[11.168515750219997 17.880030254829695 8.057354379725318 16.1742508132353 4.475653488140333 2.627786125399987 36.30075791982009 -0.6029710573510325 2.5474907051545053 23.627323832831422 11.54409930344456 -4.452635299294852 -12.92889253551203 -13.922090948986359 -9.164186790910597 1.1626741627935304 0.3400275469211964 -5.566135648100815 0.8224289507219256 -18.209201788870317]";
  auto group = getMoveEvaluatorGroups().at(MOVE_EVALUATOR_GROUP_LINEAR);
  group.setWeights(WeightingFn::readFromString(is19 ? best19_50 : best18_50));
  return group;
}



MoveEvaluatorTetrisReady getBestMoveEvaluatorTetrisReady(bool is19) {
  return {WeightingFn::readFromString(is19 ? best19_tetris_ready : best18_tetris_ready)};
}

MoveEvaluatorBlockLinear getBestMoveEvaluatorBlockLinear(bool is19) {
  return {WeightingFn::readFromString(is19 ? best19_block_linear : best18_block_linear)};
}

MoveEvaluatorBlockLinear getBestMoveEvaluatorBlockLinear150(bool is19) {
  const std::string best19_150 = "[-1.213190652899402 15.155370393116664 5.539277259093075 7.87895803392151 0.5963372408623584 7.777769843374156 10.958901782213673 -3.166021592225589 5.89740402033439 4.686896282572464 10.33961422803624 -6.318664556610852 -6.132288613130479 -6.80583626650054 -8.039554456886911 1.4747493335975275 -2.4731734335843756 -7.379553764921042 -6.186751554574753 -8.386796945868232]";
  return { WeightingFn::readFromString(best19_150) };
}

MoveEvaluatorGroup getBestMoveEvaluatorBlockLinear150_group(bool is19) {
  const std::string best19_150 = "[-1.213190652899402 15.155370393116664 5.539277259093075 7.87895803392151 0.5963372408623584 7.777769843374156 10.958901782213673 -3.166021592225589 5.89740402033439 4.686896282572464 10.33961422803624 -6.318664556610852 -6.132288613130479 -6.80583626650054 -8.039554456886911 1.4747493335975275 -2.4731734335843756 -7.379553764921042 -6.186751554574753 -8.386796945868232]";
  auto group = getMoveEvaluatorGroups().at(MOVE_EVALUATOR_GROUP_LINEAR);
  group.setWeights(WeightingFn::readFromString(best19_150));
  return group;
}

MoveEvaluatorGroup gestBestMoveEvaluatorBurns_group(bool is19) {
  const std::string best18_150 = "[-4.6437083157287 20.006165811087673 3.7150428456718134 14.055867138357229 15.80778883671229 10.774266169257713 24.35074570603681 -2.58228185879174 -1.9368448190716643 7.1509715118623305 7.634563886505738 -1.8891271629776507 -14.1034961860709 -10.157981457917142 -21.308238737895685 1.8177764508587355 5.35325997968149 -13.871221996411933 -9.017482259878406]";
  auto group = getMoveEvaluatorGroups().at(MOVE_EVALUATOR_GROUP_BURNS);
  group.setWeights(WeightingFn::readFromString(best18_150));
  return group;
}


MoveEvaluatorBlockQuadratic getBestMoveEvaluatorBlockQuadratic(bool is19) {
  return {WeightingFn::readFromString(is19 ? best19_block_quadratic : best18_block_quadratic)};
}

using Ms = std::chrono::duration<double>;
using Seconds = std::chrono::duration<double>;

template <typename B>
long getMs(B s1) {
  return std::chrono::duration<double, std::milli>(s1).count();
}
